package Interface;

import Algoritimos.ArvoreGeradoraMinima;
import Algoritimos.DFS;
import Algoritimos.BFS;
import Algoritimos.Dijkstra;
import Algoritimos.Planaridade;
import Coloração.Dsatur;
import Coloração.WelshPowell;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import Modelo.Aresta;
import Modelo.Grafo;
import Modelo.Vertice;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import Modelo.ListaAdjacencia;


public class GUI extends javax.swing.JFrame {
    
    private Grafo graph;
    private List<JPanel> vertexPrint;
    private List<JPanel> edgePrint;
    private List<String> vertexLabelList;
    private List<Vertice> visitedList;
    private List<Aresta> visitedListEdges;
    private ArvoreGeradoraMinima a = null;


    public GUI() {
        initComponents();
        //this.graph = new Grafo();
        //this.vertexLabelList = new ArrayList<>();
    }
    
    
    public void createGraphUI(){
        JPanel node;
        JLabel label;
        int deslocX = 0;
        int deslocY = 180;
        int qtdVertex = 0;
        int step = 0;
        if(graph != null)
            qtdVertex = graph.getVertexList().size();
        if (qtdVertex > 0)
            step = 360 / qtdVertex;
        int i = 0;
        int angle = 0;
        this.vertexPrint = new ArrayList<>();
        this.edgePrint = new ArrayList<>();
        
        if(qtdVertex > 0) {
            for(Vertice vertex : graph.getVertexList()){
                node = new JPanel();
                node.setSize(30, 30);
                i++;
                int midX = (int)(jpnlBody.getSize().getWidth() / 2);
                int midY = (int)(jpnlBody.getSize().getHeight() / 2);
                int radius = (int) ((jpnlBody.getSize().getHeight() * 0.75) / 2);

                int X = (int) (midX + radius * Math.sin(angle * Math.PI/180) - 15);
                int Y = (int) (midY + radius * -Math.cos(angle * Math.PI/180) - 15);

                angle += step;

                vertex.setPosX(X);
                vertex.setPosY(Y);
                node.setLocation(vertex.getPosX(), vertex.getPosY());
                node.setBackground(vertex.getColor());
                node.setVisible(true);
                label = new JLabel(vertex.getLabel());
                label.setVisible(true);
                label.setForeground(Color.white);
                label.setFont(new Font("Arial", Font.BOLD, 12));
                node.add(label);
                vertexPrint.add(node);
            }
        }

        
        if(graph != null) {
            for(Aresta edge : graph.getEdgeList()){
                //TODO: retirar redundância
                // Vertice vertex1 = edge.getVertex1();
                
                Vertice vertex1 = graph.getEdgeList().get(graph.getEdgeList().indexOf(edge)).getVertex1();
                Vertice vertex2 = graph.getEdgeList().get(graph.getEdgeList().indexOf(edge)).getVertex2();
                Line line = new Line(vertex1.getPosX() + 15, vertex1.getPosY() + 15, vertex2.getPosX() + 15, vertex2.getPosY() + 15);
                line.setSize(500, 500);
                line.setBackground(Color.black);
                line.setVisible(true);

                if(this.graph.getPondered()){
                    label = new JLabel(String.valueOf(edge.getWeight()));
                    int lblPosX;
                    int lblPosY;
                    lblPosX = (vertex1.getPosX() + vertex2.getPosX()) / 2 + 10;
                    lblPosY = (vertex1.getPosY() + vertex2.getPosY()) / 2 + 10;
                    label.setLocation(1000, 1000);
                    label.setVisible(true);
                    label.setForeground(Color.black);
                    label.setFont(new Font("Arial", Font.BOLD, 12));
                    line.add(label);
                }
                edgePrint.add(line);
            }
        } 
    }
    
    public void graphDraw(){
        jpnlBody.removeAll();
        jpnlBody.updateUI();
        for(JPanel vertexPanel : vertexPrint){
            jpnlBody.add(vertexPanel);
        }
        
        for (JPanel edgePanel : edgePrint){
            jpnlBody.add(edgePanel);
        }
        
        jpnlBody.repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jpHeader = new javax.swing.JPanel();
        jCbSelectAlgorithm = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTxtInitialVertex = new javax.swing.JTextField();
        jTxtFinalVertex = new javax.swing.JTextField();
        jBtnRun = new javax.swing.JButton();
        jcbColorAlgorithm = new javax.swing.JComboBox<>();
        jBtnColor = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jBtnPlanarity = new javax.swing.JButton();
        jpnlBody = new javax.swing.JPanel();
        jpnlReport = new javax.swing.JPanel();
        jLblVerticesList = new javax.swing.JLabel();
        jLblAdjacencyList = new javax.swing.JLabel();
        jpnlListVertex = new javax.swing.JPanel();
        jLblVertexList = new javax.swing.JLabel();
        jScrlAdjacencyList = new javax.swing.JScrollPane();
        jTxtAdjacencyList = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtVisitedList = new javax.swing.JTextArea();
        jpCreateGraph = new javax.swing.JPanel();
        jCbOriented = new javax.swing.JCheckBox();
        jCbPondered = new javax.swing.JCheckBox();
        jbCreateGraph = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jpAddVertexEdge = new javax.swing.JPanel();
        jLblAddVertex = new javax.swing.JLabel();
        jLblAddEdge = new javax.swing.JLabel();
        jTxtAddEdgeVertex2 = new javax.swing.JTextField();
        jTxtAddEdgeVertex1 = new javax.swing.JTextField();
        jTxtAddVertex = new javax.swing.JTextField();
        jBtnAddVertex = new javax.swing.JButton();
        jBtnAddEdge = new javax.swing.JButton();
        jbRemoveEdge = new javax.swing.JButton();
        jbRemoveVertex = new javax.swing.JButton();
        jLblAddEdgeWeight = new javax.swing.JLabel();
        jTxtAddEdgeWeight = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLblAddVertex1 = new javax.swing.JLabel();
        jLblAddVertex2 = new javax.swing.JLabel();
        jLblAddVertex3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Grafos");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jpHeader.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jpHeader.setName(""); // NOI18N
        jpHeader.setLayout(new java.awt.GridBagLayout());

        jCbSelectAlgorithm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DFS", "BFS", "Dijkstra", "Arvore Geradora Minima - Prim", "Arvore Geradora Minima - Kruskal" }));
        jCbSelectAlgorithm.setEnabled(false);
        jCbSelectAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbSelectAlgorithmActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        jpHeader.add(jCbSelectAlgorithm, gridBagConstraints);

        jLabel1.setText("Coloração");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        jpHeader.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Vertice inicial:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jpHeader.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Vertice final:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jpHeader.add(jLabel3, gridBagConstraints);

        jTxtInitialVertex.setEnabled(false);
        jTxtInitialVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtInitialVertexActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jpHeader.add(jTxtInitialVertex, gridBagConstraints);

        jTxtFinalVertex.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jpHeader.add(jTxtFinalVertex, gridBagConstraints);

        jBtnRun.setText("Iniciar");
        jBtnRun.setEnabled(false);
        jBtnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRunActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 20);
        jpHeader.add(jBtnRun, gridBagConstraints);

        jcbColorAlgorithm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "WelshPowell", "DSatur" }));
        jcbColorAlgorithm.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 20, 5);
        jpHeader.add(jcbColorAlgorithm, gridBagConstraints);

        jBtnColor.setText("Colorir");
        jBtnColor.setEnabled(false);
        jBtnColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnColorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 20, 5);
        jpHeader.add(jBtnColor, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("ALGORITMOS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 5, 20);
        jpHeader.add(jLabel9, gridBagConstraints);

        jLabel4.setText("Busca");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        jpHeader.add(jLabel4, gridBagConstraints);

        jBtnPlanarity.setText("Planaridade");
        jBtnPlanarity.setEnabled(false);
        jBtnPlanarity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPlanarityActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 20, 20);
        jpHeader.add(jBtnPlanarity, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jpHeader, gridBagConstraints);

        jpnlBody.setBackground(new java.awt.Color(255, 255, 255));
        jpnlBody.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jpnlBodyLayout = new javax.swing.GroupLayout(jpnlBody);
        jpnlBody.setLayout(jpnlBodyLayout);
        jpnlBodyLayout.setHorizontalGroup(
            jpnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpnlBodyLayout.setVerticalGroup(
            jpnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jpnlBody, gridBagConstraints);

        jpnlReport.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jpnlReport.setLayout(new java.awt.GridBagLayout());

        jLblVerticesList.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLblVerticesList.setText("LISTA DE VERTICES");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 5, 20);
        jpnlReport.add(jLblVerticesList, gridBagConstraints);

        jLblAdjacencyList.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLblAdjacencyList.setText("LISTA DE ADJACENCIA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 20);
        jpnlReport.add(jLblAdjacencyList, gridBagConstraints);

        jpnlListVertex.setBackground(new java.awt.Color(255, 255, 255));
        jpnlListVertex.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        jpnlListVertex.setPreferredSize(new java.awt.Dimension(164, 20));

        javax.swing.GroupLayout jpnlListVertexLayout = new javax.swing.GroupLayout(jpnlListVertex);
        jpnlListVertex.setLayout(jpnlListVertexLayout);
        jpnlListVertexLayout.setHorizontalGroup(
            jpnlListVertexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlListVertexLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblVertexList)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpnlListVertexLayout.setVerticalGroup(
            jpnlListVertexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlListVertexLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblVertexList)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 20);
        jpnlReport.add(jpnlListVertex, gridBagConstraints);

        jTxtAdjacencyList.setEditable(false);
        jTxtAdjacencyList.setColumns(20);
        jTxtAdjacencyList.setRows(5);
        jScrlAdjacencyList.setViewportView(jTxtAdjacencyList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.6;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 20, 20);
        jpnlReport.add(jScrlAdjacencyList, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("SOLUÇÃO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 20);
        jpnlReport.add(jLabel6, gridBagConstraints);

        jTxtVisitedList.setEditable(false);
        jTxtVisitedList.setColumns(20);
        jTxtVisitedList.setRows(2);
        jTxtVisitedList.setTabSize(3);
        jTxtVisitedList.setAutoscrolls(false);
        jScrollPane1.setViewportView(jTxtVisitedList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 20);
        jpnlReport.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jpnlReport, gridBagConstraints);

        jpCreateGraph.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jpCreateGraph.setLayout(new java.awt.GridBagLayout());

        jCbOriented.setText("Orientado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 20);
        jpCreateGraph.add(jCbOriented, gridBagConstraints);

        jCbPondered.setText("Ponderado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 20);
        jpCreateGraph.add(jCbPondered, gridBagConstraints);

        jbCreateGraph.setText("Criar");
        jbCreateGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCreateGraphActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 20, 20);
        jpCreateGraph.add(jbCreateGraph, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("GRAFO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 5, 20);
        jpCreateGraph.add(jLabel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jpCreateGraph, gridBagConstraints);

        jpAddVertexEdge.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jpAddVertexEdge.setLayout(new java.awt.GridBagLayout());

        jLblAddVertex.setText("Vértice");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        jpAddVertexEdge.add(jLblAddVertex, gridBagConstraints);

        jLblAddEdge.setText("Aresta / Arco");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 20, 5);
        jpAddVertexEdge.add(jLblAddEdge, gridBagConstraints);

        jTxtAddEdgeVertex2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 20, 5);
        jpAddVertexEdge.add(jTxtAddEdgeVertex2, gridBagConstraints);

        jTxtAddEdgeVertex1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 20, 5);
        jpAddVertexEdge.add(jTxtAddEdgeVertex1, gridBagConstraints);

        jTxtAddVertex.setEnabled(false);
        jTxtAddVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtAddVertexActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jpAddVertexEdge.add(jTxtAddVertex, gridBagConstraints);

        jBtnAddVertex.setText("+");
        jBtnAddVertex.setEnabled(false);
        jBtnAddVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddVertexActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jpAddVertexEdge.add(jBtnAddVertex, gridBagConstraints);

        jBtnAddEdge.setText("+");
        jBtnAddEdge.setEnabled(false);
        jBtnAddEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddEdgeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 20, 5);
        jpAddVertexEdge.add(jBtnAddEdge, gridBagConstraints);

        jbRemoveEdge.setText("-");
        jbRemoveEdge.setEnabled(false);
        jbRemoveEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveEdgeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 20, 20);
        jpAddVertexEdge.add(jbRemoveEdge, gridBagConstraints);

        jbRemoveVertex.setText("-");
        jbRemoveVertex.setEnabled(false);
        jbRemoveVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveVertexActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 20);
        jpAddVertexEdge.add(jbRemoveVertex, gridBagConstraints);

        jLblAddEdgeWeight.setText("Peso");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jpAddVertexEdge.add(jLblAddEdgeWeight, gridBagConstraints);

        jTxtAddEdgeWeight.setEnabled(false);
        jTxtAddEdgeWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtAddEdgeWeightActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 20, 5);
        jpAddVertexEdge.add(jTxtAddEdgeWeight, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("ESTRUTURA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 5, 20);
        jpAddVertexEdge.add(jLabel7, gridBagConstraints);

        jLblAddVertex1.setText("Nome");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jpAddVertexEdge.add(jLblAddVertex1, gridBagConstraints);

        jLblAddVertex2.setText("Nome");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jpAddVertexEdge.add(jLblAddVertex2, gridBagConstraints);

        jLblAddVertex3.setText("Nome");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jpAddVertexEdge.add(jLblAddVertex3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jpAddVertexEdge, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTxtInitialVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtInitialVertexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtInitialVertexActionPerformed

    private void jTxtAddVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtAddVertexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtAddVertexActionPerformed

    private void jBtnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRunActionPerformed
        switch(jCbSelectAlgorithm.getSelectedItem().toString()){
            case "DFS" :
                if(!jTxtInitialVertex.getText().toString().isEmpty() && !jTxtFinalVertex.getText().toString().isEmpty()) {
                    if (!(graph.getVertexByLabel(jTxtInitialVertex.getText().toString()) == null) && !(graph.getVertexByLabel(jTxtFinalVertex.getText().toString()) == null)){
                        DFS dfs = new DFS(this.graph, graph.getVertexByLabel(jTxtInitialVertex.getText()), graph.getVertexByLabel(jTxtFinalVertex.getText()));
                        dfs.startDFS();
                        visitedList = dfs.getVisitedList();
                        jTxtVisitedList.setText("");
                        for(Vertice v : visitedList){
                            jTxtVisitedList.setText(jTxtVisitedList.getText() + v.getLabel() + " -> ");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Um dos vértices informados não faz parte do grafo!", "Informação", HEIGHT);
                    }
                } else if (!jTxtInitialVertex.getText().toString().isEmpty()){
                    if (!(graph.getVertexByLabel(jTxtInitialVertex.getText().toString()) == null)){
                        DFS dfs = new DFS(this.graph, graph.getVertexByLabel(jTxtInitialVertex.getText()));
                        dfs.startDFS();
                        visitedList = dfs.getVisitedList();
                        jTxtVisitedList.setText("");
                        for(Vertice v : visitedList){
                            jTxtVisitedList.setText(jTxtVisitedList.getText() + v.getLabel() + " -> ");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "O vértice inicial informado não faz parte do grafo!", "Informação", HEIGHT);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Insira ao menos um vértice válido!", "Informação", HEIGHT);
                }
                break;

            case "BFS"  :
                if(!jTxtInitialVertex.getText().toString().isEmpty() && !jTxtFinalVertex.getText().toString().isEmpty()) {
                    if (!(graph.getVertexByLabel(jTxtInitialVertex.getText().toString()) == null) && !(graph.getVertexByLabel(jTxtFinalVertex.getText().toString()) == null)){
                        BFS bfs = new BFS(this.graph, graph.getVertexByLabel(jTxtInitialVertex.getText()), graph.getVertexByLabel(jTxtFinalVertex.getText()));
                        bfs.startBFS();
                        visitedList = bfs.getVisitedList();
                        jTxtVisitedList.setText("");
                        for(Vertice v : visitedList){
                            jTxtVisitedList.setText(jTxtVisitedList.getText() + v.getLabel() + " -> ");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Um dos vértices informados não faz parte do grafo!", "Informação", HEIGHT);
                    }
                } else if (!jTxtInitialVertex.getText().toString().isEmpty()){
                    if (!(graph.getVertexByLabel(jTxtInitialVertex.getText().toString()) == null)){
                        BFS bfs = new BFS(this.graph, graph.getVertexByLabel(jTxtInitialVertex.getText()));
                        bfs.startBFS();
                        visitedList = bfs.getVisitedList();
                        jTxtVisitedList.setText("");
                        for(Vertice v : visitedList){
                            jTxtVisitedList.setText(jTxtVisitedList.getText() + v.getLabel() + " -> ");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "O vértice inicial informado não faz parte do grafo!", "Informação", HEIGHT);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Insira ao menos um vértice válido!", "Informação", HEIGHT);
                }
                break;

            case "Dijkstra" :
                if(!jTxtInitialVertex.getText().toString().isEmpty() && !jTxtFinalVertex.getText().toString().isEmpty()) {
                    if (!(graph.getVertexByLabel(jTxtInitialVertex.getText().toString()) == null) && !(graph.getVertexByLabel(jTxtFinalVertex.getText().toString()) == null)){
                        Dijkstra dijkstra = new Dijkstra(this.graph, graph.getVertexByLabel(jTxtInitialVertex.getText()), graph.getVertexByLabel(jTxtFinalVertex.getText()));
                        dijkstra.startDijkstra();
                        visitedList = dijkstra.getVisitedList();
                        jTxtVisitedList.setText("");
                        for(Vertice v : visitedList){
                            jTxtVisitedList.setText(jTxtVisitedList.getText() + v.getLabel() + " -> ");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Um dos vértices informados não faz parte do grafo!", "Informação", HEIGHT);
                    } 
                } else {
                    JOptionPane.showMessageDialog(null, "Insira ao menos um vértice válido!", "Informação", HEIGHT);
                }
                break;
            case "Arvore Geradora Minima - Prim" :
                a = new  ArvoreGeradoraMinima(graph, "Prim");
                a.startTreeGeneration();
                jTxtVisitedList.setText(a.escreverSolucao());
                a = null; 
                break;
            case "Arvore Geradora Minima - Kruskal" :
                a = new  ArvoreGeradoraMinima(graph, "Kruskal");
                a.startTreeGeneration();
                jTxtVisitedList.setText(a.escreverSolucao());
                a = null; 
                break;
            default:
                break;
        }       
    }//GEN-LAST:event_jBtnRunActionPerformed

    private void jBtnAddVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddVertexActionPerformed
        if(!jTxtAddVertex.getText().toString().isEmpty()){
            String label = jTxtAddVertex.getText().toString();
            if(this.graph.getVertexByLabel(label) == null){
                Vertice vertex = new Vertice(label);
                graph.addVertex(vertex);
                vertexLabelList.add(label);
                
                jLblVertexList.setText("");
                vertexLabelList.sort(String.CASE_INSENSITIVE_ORDER);
                for(String str : vertexLabelList){
                    if(jLblVertexList.getText().toString() == ""){
                        jLblVertexList.setText(str);
                    } else {
                        jLblVertexList.setText(jLblVertexList.getText().toString() + ", " + str);
                    }
                }
                jTxtAddVertex.setText("");                                      // Limpa campo de inserção de label
                
                if(jcbColorAlgorithm.getSelectedItem().toString() == "DSatur"){
                    Dsatur color = new Dsatur(this.graph);
                    color.startDsatur();
                } else {
                    WelshPowell color = new WelshPowell(this.graph);
                    color.startWelshPowell();
                }
                createGraphUI();
                graphDraw();
                
            } else {
                JOptionPane.showMessageDialog(null, "Insira um label não utilizado anteriormente!", "Informação", HEIGHT);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Não é permitido valores vazios!", "Informação", HEIGHT);
        }
    }//GEN-LAST:event_jBtnAddVertexActionPerformed

    private void jBtnAddEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddEdgeActionPerformed
        if(this.graph.getPondered()){
                if(!jTxtAddEdgeWeight.getText().isEmpty() && 
                        !jTxtAddEdgeVertex1.getText().toString().isEmpty() && 
                        !jTxtAddEdgeVertex2.getText().toString().isEmpty() && 
                        !jTxtAddEdgeVertex1.getText().equals(jTxtAddEdgeVertex2.getText())){
                    
                    if(Integer.valueOf(jTxtAddEdgeWeight.getText()) > 0){
                        String labelVertex1 = jTxtAddEdgeVertex1.getText();
                        String labelVertex2 = jTxtAddEdgeVertex2.getText();
                        int labelWeight = Integer.valueOf(jTxtAddEdgeWeight.getText());
                        if(!(graph.getVertexByLabel(labelVertex1) == null) && !(graph.getVertexByLabel(labelVertex2) == null)){
                            if(!graph.isVertexConnected(graph.getVertexByLabel(labelVertex1), graph.getVertexByLabel(labelVertex2))){
                                Aresta edge = new Aresta(graph.getVertexByLabel(labelVertex1), graph.getVertexByLabel(labelVertex2), labelWeight);
                                this.graph.addEdge(edge);
                                jTxtAddEdgeVertex1.setText("");
                                jTxtAddEdgeVertex2.setText("");
                                jTxtAddEdgeWeight.setText("");
                            } else {
                                JOptionPane.showMessageDialog(null, "Aresta / Arco já existe!", "Informação", HEIGHT);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Um dos vértices não faz parte do grafo!", "Informação", HEIGHT);
                        }
                    } else{
                        JOptionPane.showMessageDialog(null, "Insira um valor válido para o peso da Aresta/Arco", "Informação", HEIGHT);
                    }
            } else {
                JOptionPane.showMessageDialog(null, "Preencha corretamente vertice inicial, final e peso!", "Informação", HEIGHT);
            }
        } else if(!jTxtAddEdgeVertex1.getText().toString().isEmpty() && 
                !jTxtAddEdgeVertex2.getText().toString().isEmpty() && 
                !jTxtAddEdgeVertex1.getText().equals(jTxtAddEdgeVertex2.getText())){
            
            String labelVertex1 = jTxtAddEdgeVertex1.getText();
            String labelVertex2 = jTxtAddEdgeVertex2.getText();            
            if(!(graph.getVertexByLabel(labelVertex1) == null) && !(graph.getVertexByLabel(labelVertex2) == null)){
                if(!graph.isVertexConnected(graph.getVertexByLabel(labelVertex1), graph.getVertexByLabel(labelVertex2))){
                    Aresta edge = new Aresta(graph.getVertexByLabel(labelVertex1), graph.getVertexByLabel(labelVertex2));
                    this.graph.addEdge(edge);
                    jTxtAddEdgeVertex1.setText("");
                    jTxtAddEdgeVertex2.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "Aresta / Arco já existe!", "Informação", HEIGHT);
                }
                
            } else {
                JOptionPane.showMessageDialog(null, "Um dos vértices não faz parte do grafo!", "Informação", HEIGHT);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Preencha corretamente vertice inicial e final!", "Informação", HEIGHT);
        }
        
        jTxtAdjacencyList.setText("");
        for (ListaAdjacencia adjacencyList : graph.getAdjacencyList()) {
            jTxtAdjacencyList.setText(jTxtAdjacencyList.getText() + adjacencyList.getVertex().getLabel() + " -> ");
            for (Vertice vertex : adjacencyList.getVertexList()) {
                jTxtAdjacencyList.setText(jTxtAdjacencyList.getText() + vertex.getLabel() + " | ");
            }
            jTxtAdjacencyList.setText(jTxtAdjacencyList.getText() + "\n");
        }
        
        if(jcbColorAlgorithm.getSelectedItem().toString() == "DSatur"){
            Dsatur color = new Dsatur(this.graph);
            color.startDsatur();
        } else {
            WelshPowell color = new WelshPowell(this.graph);
            color.startWelshPowell();
        }
        createGraphUI();
        graphDraw();
    }//GEN-LAST:event_jBtnAddEdgeActionPerformed

    private void jbCreateGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCreateGraphActionPerformed
        createGraph();
    }//GEN-LAST:event_jbCreateGraphActionPerformed

    private void createGraph(){
        this.graph = new Grafo(jCbOriented.isSelected(), jCbPondered.isSelected());
        this.vertexLabelList = new ArrayList<>();
        jLblVertexList.setText("");
        jTxtVisitedList.setText("");
        jTxtAdjacencyList.setText("");
        vertexPrint = new ArrayList<>();
        edgePrint = new ArrayList<>();
        vertexLabelList = new ArrayList<>();
        visitedList = new ArrayList<>();
        jTxtAddEdgeWeight.setEnabled(jCbPondered.isSelected());
        jTxtAddVertex.setEnabled(true);
        jTxtAddEdgeVertex1.setEnabled(true);
        jTxtAddEdgeVertex2.setEnabled(true);
        jBtnAddVertex.setEnabled(true);
        jbRemoveVertex.setEnabled(true);
        jBtnAddEdge.setEnabled(true);
        jbRemoveEdge.setEnabled(true);
        jCbSelectAlgorithm.setEnabled(true);
        jcbColorAlgorithm.setEnabled(true);
        jTxtInitialVertex.setEnabled(true);
        jTxtFinalVertex.setEnabled(true);
        jBtnRun.setEnabled(true);
        jBtnColor.setEnabled(true);
        jBtnPlanarity.setEnabled(true);
        createGraphUI();
        graphDraw();
    }
    
    
    private void jBtnColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnColorActionPerformed
        if(jcbColorAlgorithm.getSelectedItem() == "WelshPowell"){
            WelshPowell color = new WelshPowell(this.graph);
            color.startWelshPowell();
        } else {
            Dsatur color = new Dsatur(this.graph);
            color.startDsatur();
        }
        createGraphUI();
        graphDraw();
    }//GEN-LAST:event_jBtnColorActionPerformed

    private void jTxtAddEdgeWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtAddEdgeWeightActionPerformed
        
    }//GEN-LAST:event_jTxtAddEdgeWeightActionPerformed

    private void jbRemoveVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveVertexActionPerformed
        if(!jTxtAddVertex.getText().isEmpty() && !(graph.getVertexByLabel(jTxtAddVertex.getText()) == null)){
            if(graph.removeVertexByLabel(jTxtAddVertex.getText())){
                
                vertexLabelList.remove(jTxtAddVertex.getText());                // Remove da lista de vértices exibida na UI
                jTxtAddVertex.setText("");                                      // Reseta campo de inserção e remoção de vértices
                jLblVertexList.setText("");                                     // Reseta campo de impressão da lista de vértices
                vertexLabelList.sort(String.CASE_INSENSITIVE_ORDER);            // Reordena lista de impressão de vértices
                for(String str : vertexLabelList){                              // Reimprime campo de impressão de vértices
                    if(jLblVertexList.getText().toString() == ""){
                        jLblVertexList.setText(str);
                    } else {
                        jLblVertexList.setText(jLblVertexList.getText().toString() + ", " + str);
                    }
                }
                
                jTxtAdjacencyList.setText("");                                  // Remove vértice da lista de adjacencia
                for (ListaAdjacencia adjacencyList : graph.getAdjacencyList()) {
                    jTxtAdjacencyList.setText(jTxtAdjacencyList.getText() + adjacencyList.getVertex().getLabel() + " -> ");
                    for (Vertice vertex : adjacencyList.getVertexList()) {
                        jTxtAdjacencyList.setText(jTxtAdjacencyList.getText() + vertex.getLabel() + " | ");
                    }
                    jTxtAdjacencyList.setText(jTxtAdjacencyList.getText() + "\n");
                }
                
                createGraphUI();                                                // Reimprime UI sem o vértice removido
                graphDraw();
            } else {
                JOptionPane.showMessageDialog(null, "O vértice não foi removido pois possui conexões!", "Informação", HEIGHT);
            }            
        } else{
            JOptionPane.showMessageDialog(null, "Insira um vértice válido para remover!", "Informação", HEIGHT);
        }
    }//GEN-LAST:event_jbRemoveVertexActionPerformed

    private void jbRemoveEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveEdgeActionPerformed
        Aresta edge;
        edge = this.graph.getEdgeByVertex(graph.getVertexByLabel(jTxtAddEdgeVertex1.getText()), graph.getVertexByLabel(jTxtAddEdgeVertex2.getText()));

        if(edge == null && this.graph.getOriented()){
            edge = this.graph.getEdgeByVertex(graph.getVertexByLabel(jTxtAddEdgeVertex2.getText()), graph.getVertexByLabel(jTxtAddEdgeVertex1.getText()));
        }
        if(edge == null){
            JOptionPane.showMessageDialog(null, "Arco ou aresta não encontrado!", "Informação", HEIGHT);
        } else if(edge != null){
            this.graph.removeEdge(edge);
            jTxtAdjacencyList.setText("");                                  // Remove vértice da lista de adjacencia
                for (ListaAdjacencia adjacencyList : graph.getAdjacencyList()) {
                    jTxtAdjacencyList.setText(jTxtAdjacencyList.getText() + adjacencyList.getVertex().getLabel() + " -> ");
                    for (Vertice vertex : adjacencyList.getVertexList()) {
                        jTxtAdjacencyList.setText(jTxtAdjacencyList.getText() + vertex.getLabel() + " | ");
                    }
                    jTxtAdjacencyList.setText(jTxtAdjacencyList.getText() + "\n");
                }
            jTxtAddEdgeVertex1.setText("");
            jTxtAddEdgeVertex2.setText("");
            createGraphUI();                                                // Reimprime UI sem o vértice removido
            graphDraw();
        }
    }//GEN-LAST:event_jbRemoveEdgeActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        createGraphUI();
        graphDraw();
    }//GEN-LAST:event_formComponentResized

    private void jCbSelectAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbSelectAlgorithmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCbSelectAlgorithmActionPerformed

    private void jBtnPlanarityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPlanarityActionPerformed
        Planaridade planarity = new Planaridade(this.graph);
        boolean isPlanar = planarity.startPlanarity();
        boolean hasAThreeCicle = planarity.hasAThreeCicle();
        if(isPlanar)
            JOptionPane.showMessageDialog(this, "O grafo é planar", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        else
            JOptionPane.showMessageDialog(this, "O grafo não é planar", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        if(hasAThreeCicle)
            JOptionPane.showMessageDialog(this, "O grafo tem um ciclo de tamanho três", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        else
            JOptionPane.showMessageDialog(this, "O grafo não tem um ciclo de tamanho três", "Resultado", JOptionPane.INFORMATION_MESSAGE);
            
    }//GEN-LAST:event_jBtnPlanarityActionPerformed

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        createGraphUI();
        graphDraw();
    }//GEN-LAST:event_formWindowStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAddEdge;
    private javax.swing.JButton jBtnAddVertex;
    private javax.swing.JButton jBtnColor;
    private javax.swing.JButton jBtnPlanarity;
    private javax.swing.JButton jBtnRun;
    private javax.swing.JCheckBox jCbOriented;
    private javax.swing.JCheckBox jCbPondered;
    private javax.swing.JComboBox<String> jCbSelectAlgorithm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLblAddEdge;
    private javax.swing.JLabel jLblAddEdgeWeight;
    private javax.swing.JLabel jLblAddVertex;
    private javax.swing.JLabel jLblAddVertex1;
    private javax.swing.JLabel jLblAddVertex2;
    private javax.swing.JLabel jLblAddVertex3;
    private javax.swing.JLabel jLblAdjacencyList;
    private javax.swing.JLabel jLblVertexList;
    private javax.swing.JLabel jLblVerticesList;
    private javax.swing.JScrollPane jScrlAdjacencyList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTxtAddEdgeVertex1;
    private javax.swing.JTextField jTxtAddEdgeVertex2;
    private javax.swing.JTextField jTxtAddEdgeWeight;
    private javax.swing.JTextField jTxtAddVertex;
    private javax.swing.JTextArea jTxtAdjacencyList;
    private javax.swing.JTextField jTxtFinalVertex;
    private javax.swing.JTextField jTxtInitialVertex;
    private javax.swing.JTextArea jTxtVisitedList;
    private javax.swing.JButton jbCreateGraph;
    private javax.swing.JButton jbRemoveEdge;
    private javax.swing.JButton jbRemoveVertex;
    private javax.swing.JComboBox<String> jcbColorAlgorithm;
    private javax.swing.JPanel jpAddVertexEdge;
    private javax.swing.JPanel jpCreateGraph;
    private javax.swing.JPanel jpHeader;
    private javax.swing.JPanel jpnlBody;
    private javax.swing.JPanel jpnlListVertex;
    private javax.swing.JPanel jpnlReport;
    // End of variables declaration//GEN-END:variables

    public class Line extends JPanel {

        private final int initialXPos;
        private final int initialYPos;
        private final int finalXPos;
        private final int finalYPos;

        public Line(int initialXPos, int initialYPos, int finalXPos, int finalYPos) {
            this.initialXPos = initialXPos;
            this.initialYPos = initialYPos;
            this.finalXPos = finalXPos;
            this.finalYPos = finalYPos;
        }

        private void doDrawing(Graphics g) {

            Graphics2D g2d = (Graphics2D) g;

            g2d.drawLine(initialXPos, initialYPos, finalXPos, finalYPos);
        }

        @Override
        public void paintComponent(Graphics g) {

            doDrawing(g);
        }
    }   
}
